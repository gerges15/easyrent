export async function initAdminDashboard() {
  const token = localStorage.getItem("token");
  const userData = Cookies.get("userData");

  if (!token || !userData) {
    showToast("You must be logged in.", "error");
    window.location.href = "/";
    return;
  }

  // Mount theme toggles
  document
    .querySelectorAll("#theme-toggle")
    .forEach((area) => area.appendChild(createThemeToggle()));

  try {
    const res = await getAllUnits();
    const units = res?.data?.["$values"] || [];

    document.getElementById("totalUnitsCount").textContent = units.length;
    document.getElementById("pendingUnitsCount").textContent = units.filter(
      (u) => u.status === "Pending"
    ).length;
    document.getElementById("availableUnitsCount").textContent = units.filter(
      (u) => u.status === "Available"
    ).length;

    document
      .querySelectorAll(".fa-sync-alt")
      .forEach((el) => el.classList.add("hidden"));
  } catch (err) {
    console.error("Failed to fetch unit data:", err);
    showToast("Failed to load dashboard data", "error");
  }

  // Profile dropdown toggle
  document.addEventListener("click", (e) => {
    const profileBtn = document.querySelector("#profileMenuBtn");
    const dropdown = document.querySelector("#profileDropdown");
    if (profileBtn && dropdown) {
      if (profileBtn.contains(e.target)) {
        dropdown.classList.toggle("hidden");
      } else if (!dropdown.contains(e.target)) {
        dropdown.classList.add("hidden");
      }
    }
  });

  // Handle tab navigation
  const navItems = document.querySelectorAll(".nav-item");
  navItems.forEach((item) => {
    item.addEventListener("click", async () => {
      navItems.forEach((el) =>
        el.classList.remove(
          "bg-indigo-100",
          "dark:bg-indigo-900",
          "text-indigo-700",
          "dark:text-indigo-300"
        )
      );
      item.classList.add(
        "bg-indigo-100",
        "dark:bg-indigo-900",
        "text-indigo-700",
        "dark:text-indigo-300"
      );

      const target = item.getAttribute("data-target");
      const section = document.getElementById("admin-units-section");

      if (target === "units") {
        section?.classList.remove("hidden");
        try {
          const res = await getAllUnits();
          renderAdminUnits(res?.data?.["$values"] || []);
        } catch (err) {
          console.error("Failed to fetch units:", err);
          showToast("Error loading units", "error");
        }
      } else if (target === "bookings") {
        section?.classList.remove("hidden");
        try {
          const res = await getAllBookUnits();
          renderBookings(res?.data?.["$values"] || []);
        } catch (err) {
          console.error("Failed to fetch bookings:", err);
          showToast("Error loading bookings", "error");
        }
      } else if (target === "students") {
        try {
          const res = await getAllStudents();
          renderStudents(res?.data?.["$values"] || []);
        } catch (err) {
          console.error("Failed to fetch students:", err);
          showToast("Error loading students", "error");
        }
      } else {
        section?.classList.add("hidden");
      }
    });
  });
}

function renderAdminUnits(units) {
  const section = document.getElementById("admin-units-section");
  section.innerHTML = units
    .map(
      (u) => `
      <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md border">
        <h3 class="text-lg font-semibold text-indigo-600 dark:text-indigo-300">${
          u.title
        }</h3>
        <p class="text-sm text-gray-500 dark:text-gray-400">${u.address}</p>
        <p class="text-sm mt-1"><strong>Status:</strong> ${u.status}</p>
        <div class="mt-3 flex gap-3">
          <button data-id="${u.id}" class="toggle-approve-btn bg-${
        u.status === "Pending" ? "green" : "yellow"
      }-500 hover:bg-${
        u.status === "Pending" ? "green" : "yellow"
      }-600 text-white px-3 py-1 rounded text-sm">
            ${u.status === "Pending" ? "Approve" : "Disapprove"}
          </button>
          <button data-id="${
            u.id
          }" class="delete-btn bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm">Delete</button>
        </div>
      </div>
    `
    )
    .join("");

  // Attach approve/disapprove
  section.querySelectorAll(".toggle-approve-btn").forEach((btn) => {
    btn.addEventListener("click", async () => {
      const id = btn.dataset.id;
      try {
        await approveUnit(id);
        showToast("Status toggled", "success");
        initAdminDashboard();
      } catch (err) {
        console.error("Failed to toggle approval", err);
        showToast("Error updating unit status", "error");
      }
    });
  });

  // Attach delete
  section.querySelectorAll(".delete-btn").forEach((btn) => {
    btn.addEventListener("click", async () => {
      const id = btn.dataset.id;
      try {
        await deleteUnit(id);
        showToast("Unit deleted", "success");
        initAdminDashboard();
      } catch (err) {
        console.error("Failed to delete unit", err);
        showToast("Error deleting unit", "error");
      }
    });
  });
}

function renderBookings(bookings) {
  const section = document.getElementById("admin-units-section");
  section.innerHTML = bookings
    .map(
      (b) => `
      <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md border">
        <h3 class="text-lg font-semibold text-indigo-600 dark:text-indigo-300">Booking ID: ${b.id}</h3>
        <p class="text-sm text-gray-500 dark:text-gray-400">Student ID: ${b.studentId_FK}</p>
        <p class="text-sm text-gray-500 dark:text-gray-400">Unit ID: ${b.unitId_FK}</p>
        <button data-id="${b.id}" class="delete-booking-btn mt-2 bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm">Delete</button>
      </div>
    `
    )
    .join("");

  section.querySelectorAll(".delete-booking-btn").forEach((btn) => {
    btn.addEventListener("click", async () => {
      try {
        await deleteBookUnits(btn.dataset.id);
        showToast("Booking deleted", "success");
        initAdminDashboard();
      } catch (err) {
        console.error("Failed to delete booking", err);
        showToast("Error deleting booking", "error");
      }
    });
  });
}

function renderStudents(students) {
  const section = document.getElementById("admin-units-section");
  section.innerHTML = students
    .map(
      (s) => `
      <div class="bg-white dark:bg-gray-900 p-6 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 
                  hover:shadow-xl transition-shadow duration-300 max-w-sm w-full mx-auto">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-xl font-bold text-indigo-600 dark:text-indigo-400 truncate">${
            s.name
          }</h3>
          <span class="text-xs font-medium text-gray-500 dark:text-gray-400">Student</span>
        </div>
        <div class="space-y-2 text-sm text-gray-600 dark:text-gray-300">
          <div class="flex items-center gap-2">
            <svg class="w-5 h-5 text-indigo-500 dark:text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
            </svg>
            <span><strong>Email:</strong> ${s.email}</span>
          </div>
          <div class="flex items-center gap-2">
            <svg class="w-5 h-5 text-indigo-500 dark:text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
            </svg>
            <span><strong>Phone:</strong> ${s.phoneNumber}</span>
          </div>
          <div class="flex items-center gap-2">
            <svg class="w-5 h-5 text-indigo-500 dark:text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
            </svg>
            <span><strong>Username:</strong> ${s.userName}</span>
          </div>
          <div class="flex items-center gap-2">
            <svg class="w-5 h-5 text-indigo-500 dark:text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
            </svg>
            <span><strong>Address:</strong> ${s.address}</span>
          </div>
          <div class="flex items-center gap-2">
            <svg class="w-5 h-5 text-indigo-500 dark:text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 14v3m4-3v3m4-3v3M3 21h18M3 10h18M3 7l9-4 9 4M4 10h16v11H4V10z" />
            </svg>
            <span><strong>University:</strong> ${s.universityName}</span>
          </div>
          <div class="flex items-center gap-2">
            <svg class="w-5 h-5 text-indigo-500 dark:text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 Â 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z" />
            </svg>
            <span><strong>College:</strong> ${s.collegeName}</span>
          </div>
        </div>
        <div class="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
          <p class="text-sm font-medium text-gray-700 dark:text-gray-200">
            <strong>Booked Units:</strong> ${
              s.bookedUnits?.["$values"]?.length > 0
                ? s.bookedUnits["$values"]
                    .map(
                      (unit) =>
                        `<span class="inline-block bg-indigo-100 dark:bg-indigo-800 text-indigo-800 dark:text-indigo-200 text-xs px-2 py-1 rounded-full mr-1">${unit}</span>`
                    )
                    .join("")
                : '<span class="text-gray-500 dark:text-gray-400">No units booked</span>'
            }
          </p>
        </div>
        <div class="mt-4 flex justify-end gap-2">
          <button class="px-3 py-1 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 dark:bg-indigo-500 dark:hover:bg-indigo-600 transition-colors text-sm">
            Edit
          </button>
          <button class="px-3 py-1 bg-red-600 text-white rounded-md hover:bg-red-700 dark:bg-red-500 dark:hover:bg-red-600 transition-colors text-sm">
            Delete
          </button>
        </div>
      </div>
    `
    )
    .join("");
}
